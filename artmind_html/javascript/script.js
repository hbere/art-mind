// --- ArtMind Javascript ---
const baseURI_getObjectInformation =
  "https://hackathon.philamuseum.org/api/v0/collection/object/";
const baseURI_getObjectsForLocation =
  "https://hackathon.philamuseum.org/api/v0/collection/object/location/";
let ObjectID = "59198"; // Prometheus Bound: 104468
let tempObjectID;
// ***** TO FIX: someplace more secure to store this key!  Noted 5/6/18.
// https://support.google.com/cloud/answer/6310037
// ARTMIND_DEV_PMA_TOKEN
// # .bashrc
let token = "YOUR_KEY_HERE";
let objectIDs = []; // objectIDs
let votes = []; // did you like it (1=yes, -1=no, 0=noVote)
// let galleries = [111, 116];
let galleries = [111, 116, 155, 161, 201, 204, 226, 244, 265, 283, 299];
let objectsInGalleries = [];
let objectIDs_recommended = [101, 102, 103];

let myVotes = [
  "-1-11-1-1-1-1111",
  "1-1-1111-1-1-11",
  "-1-111111-111",
  "1-1-111-1-111-1",
  "-1-11-1-11-1-1-1-1",
  "-1111-1-1111-1",
  "1-1111-11-111",
  "-11-11111-1-11",
  "11-1-111-1-11-1",
  "1-1-1-11-1-11-1-1",
  "1-1-1-1-11-1-111",
  "-1-1111-1-11-11",
  "-1-11-1-111-1-11",
  "1-111-1111-1-1",
  "1-11111-11-11",
  "-1-1-1-1-1-11111",
  "-1-11-11-1-1111",
  "1-1-1-1111-11-1",
  "-1-11-111-1-1-1-1",
  "-11-11-1-111-1-1",
  "-11-11-1-1-1111",
  "-11-11-11-1-1-1-1",
  "-11-1-11111-11",
  "-1-1-1-11-11-111",
  "-1-11-1111-1-11",
  "-1-11-11-111-1-1",
  "-1-1-1-1-1-1-11-1-1",
  "1111-11111-1",
  "-111111-1-11-1",
  "1-111-11-1111",
  "1-111-1-1-1-1-1-1",
  "-11-111-11-1-1-1",
  "111-1-11111-1",
  "-11-11-111-1-11",
  "1-1-1-11-11111",
  "-1-1-1-111-11-11",
  "-1-11-1-1-11-1-1-1",
  "1-1-1111111-1",
  "-1-1-1-1-111-11-1",
  "1-111-1-11-1-11",
  "-1-1-11-1-1-1-111",
  "-11-111-1-1-1-11",
  "-11-1111-111-1",
  "-1-11-1-1-111-1-1",
  "-111-11-1-1-111",
  "1-1-1-1-1-11-111",
  "-1-1111111-11",
  "-1-11-1-1-1-1-1-11",
  "-1-11-1-11-111-1",
  "-11-111-111-1-1",
  "1-111-1-1-11-1-1",
  "1-1111-111-11",
  "-1-1-1-1-11-1111",
  "-1-1-1-1-1-1-1-1-1-1",
  "1-1-1-11-1-1-11-1",
  "-1-11-11-11-1-1-1",
  "1-1-1-1-11-11-11",
  "-11-11-11-11-1-1",
  "-11-11-1-11-1-1-1",
  "1-111-111-11-1",
  "-1111111111",
  "1-11-1-1-1-1-111",
  "-1-1-1-1-1-11-1-11",
  "-1-11-111-11-1-1",
  "-1-11-111-111-1",
  "-1-11-11-1-1-1-11",
  "1-111-111-1-1-1",
  "11-111-1-1-111",
  "-11-11-1-1-1-1-11",
  "-11-11-1-11-11-1",
  "-11-11-11-111-1",
  "1-1-1-111-1111",
  "-1-1-1-11-111-11",
  "1-1-1-11-1-1-1-1-1",
  "-1-1-1-1-1-1-1-11-1",
  "-1-11-11-11-11-1",
  "1-111-11-1-1-11",
  "-1-1-11-111-111",
  "1-111-1-1-111-1",
  "-11-111-1111-1",
  "-1-11-1-11-11-1-1",
  "-111-1111-111",
  "1-1-1-11-11-1-11",
  "11-1-1111111",
  "-1-11-1-1-1111-1",
  "-11-1111-11-1-1",
  "-1-1-11-1-1-11-11",
  "1-1-111111-1-1",
  "-1-1-1-1-111-1-1-1",
  "-1-11-1-1-11-11-1",
  "-111-11-1-11-11",
  "1-1-1-1-1-111-11",
  "111-1-1111-1-1",
  "11-1-1-11-1-111",
  "1-111-1-1-1-11-1",
  "-11-111-11-11-1",
  "-11111-1-1111",
  "1-11-1-111-111",
  "1111-1111-1-1",
  "-1-1-1-1-1-1-111-1",
  "-1-1-1-1-11-1-1-11",
  "-1-11-11-1111-1",
  "-111111-1-1-1-1",
  "11-11111-111",
  "-11-11-11-1-11-1",
  "-11-11-1-1111-1",
  "-1111111-1-11",
  "1-11-1-1-1-11-11",
  "1-1-1-1111-1-1-1",
  "-1-11-111-1-11-1",
  "1-111-11111-1",
  "11-111-1-11-11",
  "-1111-11-1-111",
  "1-1-1-111-1-1-11",
  "11-1-11-1-1111",
  "1-1-1-11-1-111-1",
  "11-1-111-1-1-1-1",
  "11-1-11-11111",
  "-1-1-11-1111-11",
  "-1111-1-111-1-1",
  "1-1-111-1-11-1-1",
  "-1-11-1-11-1-11-1",
  "-111-11111-11",
  "11-1-1111-1-11",
  "111-1-1-1-11-1-1",
  "11-1-1-1-11-111",
  "-11-1111-1-11-1",
  "1111-1-1-11-1-1",
  "1-1-11111-11-1",
  "-1-1-1-1-11111-1",
  "-11111-11-1-1-1",
  "111-1-111-11-1",
  "11-1-1-11-11-11",
  "1111-1-1-1-111",
  "-11111-1-1-1-11",
  "1-11-1-1111-11",
  "1111-111-11-1",
  "-111111-111-1",
  "-11111-11111",
  "11-1-1-1-111-1-1",
  "111-1-1-1-1-111",
  "11-111111-11",
  "1-1-111-1-1-111",
  "-1111-1-11-111",
  "1-1-1-111111-1",
  "11-1-11-11-1-1-1",
  "11-1-111-1111",
  "11-1-11-1-1-1-1-1",
  "-1111-11-11-1-1",
  "-1111-11-11-11",
  "11-1-11-1-1-1-11",
  "11-1-111-111-1",
  "11-1-11-11-1-11",
  "1-1-1-1111111",
  "-1111-1-11-11-1",
  "1-1-111-1-1-11-1",
  "11-111111-1-1",
  "111-1-1-1-1-11-1",
  "11-1-1-1-111-11",
  "1111-111-111",
  "1-11-1-1111-1-1",
  "-111111-1111",
  "1111-1-1-1-11-1",
  "-11111-1-1-1-1-1",
  "-11111-1111-1",
  "11-1-1-11-11-1-1",
  "111-1-111-111",
  "1-1-11111-111",
  "1111-1-1-11-11",
  "-1-1-1-1-111111",
  "-11111-11-1-11",
  "11-1-1-1-11-11-1",
  "111-1-1-1-11-11",
  "-11-1111-1-111",
  "11-1-1111-1-1-1",
  "-111-11111-1-1",
  "-1-11-1-11-1-111",
  "1-1-111-1-11-11",
  "-1111-1-111-11",
  "-1-1-11-1111-1-1",
  "11-1-11-1111-1",
  "11-1-111-1-1-11",
  "11-1-11-1-111-1",
  "1-1-1-11-1-1111",
  "1-1-1-111-1-1-1-1",
  "-1111-11-1-11-1",
  "11-111-1-11-1-1",
  "1-111-111111",
  "1-1-1-1111-1-11",
  "-1-11-111-1-111",
  "1-11-1-1-1-11-1-1",
  "-1111111-1-1-1",
  "-11-11-1-11111",
  "11-11111-11-1",
  "-11-11-11-1-111",
  "-1-11-11-11111",
  "-1-1-1-1-1-1-1111",
  "1111-1111-11",
  "1-11-1-111-11-1",
  "-1-1-1-1-11-1-1-1-1",
  "-111111-1-1-11",
  "-11111-1-111-1",
  "1-111-1-1-1-111",
  "11-1-1-11-1-11-1",
  "111-1-1111-11",
  "-11-111-11-111",
  "1-1-1-1-1-111-1-1",
  "-111-11-1-11-1-1",
  "-1-11-1-1-11-111",
  "1-1-111111-11",
  "-1-1-1-1-111-1-11",
  "-1-1-11-1-1-11-1-1",
  "-11-1111-11-11",
  "11-1-111111-1",
  "-1-11-1-1-11111",
  "1-1-1-11-11-1-1-1",
  "-111-1111-11-1",
  "-1-11-1-11-11-11",
  "-11-111-11111",
  "1-111-1-1-1111",
  "1-111-11-1-1-1-1",
  "-1-1-11-111-11-1",
  "-1-1-1-1-1-1-1-111",
  "1-1-1-11-1-1-1-11",
  "-1-11-11-11-111",
  "1-1-1-111-111-1",
  "-1-1-1-11-111-1-1",
  "-11-11-11-1111",
  "-11-11-1-1-1-1-1-1",
  "11-111-1-1-11-1",
  "1-111-111-1-11",
  "-11-11-1-11-111",
  "-1-11-111-1111",
  "-1-11-111-11-11",
  "-1-11-11-1-1-1-1-1",
  "1-11-1-1-1-1-11-1",
  "-1-1-1-1-1-11-1-1-1",
  "-111111111-1",
  "1-111-111-111",
  "-11-11-1-11-1-11",
  "-11-11-11-11-11",
  "1-1-1-1-11-11-1-1",
  "1-1-1-11-1-1-111",
  "-1-1-1-1-1-1-1-1-11",
  "-1-11-11-11-1-11",
  "-1-1-1-1-11-111-1",
  "1-1111-111-1-1",
  "1-111-1-1-11-11",
  "-11-111-111-11",
  "-1-11-1-11-1111",
  "-1-1111111-1-1",
  "1-1-1-1-1-11-11-1",
  "-1-11-1-1-1-1-1-1-1",
  "-111-11-1-1-11-1",
  "-1-11-1-1-111-11",
  "-11-1111-1111",
  "-11-111-1-1-1-1-1",
  "1-111-1-11-1-1-1",
  "-1-1-11-1-1-1-11-1",
  "1-1-11111111",
  "-1-1-1-1-111-111",
  "-1-11-1-1-11-1-11",
  "1-1-1-11-1111-1",
  "-1-1-1-111-11-1-1",
  "111-1-111111",
  "-11-111-11-1-11",
  "1-111-1-1-1-1-11",
  "-11-11-111-1-1-1",
  "1-111-11-111-1",
  "1111-111111",
  "-1-1-1-1-1-1-11-11",
  "-1-11-11-111-11",
  "-1-11-1111-1-1-1",
  "-1-1-1-11-11-11-1",
  "-111111-1-111",
  "-11-1-11111-1-1",
  "-11-11-11-1-1-11",
  "-11-11-1-1-111-1",
  "-11-11-1-111-11",
  "1-1-1-1111-111",
  "-1-11-111-1-1-11",
  "-1-11-11-1-111-1",
  "-1-1-1-1-1-1111-1",
  "1-11111-11-1-1",
  "1-111-1111-11",
  "-1-1111-1-11-1-1",
  "1-1-1-1-11-1-11-1",
  "-1-11-1-111-1-1-1",
  "1-1-1-11-1-11-11",
  "11-1-111-1-111",
  "-11-11111-1-1-1",
  "1-1111-11-11-1",
  "-1111-1-11111",
  "1-1-111-1-1111",
  "-1-11-1-11-1-1-11",
  "1-1-1111-1-1-1-1",
  "-1-111111-11-1",
  "-1-11-1-1-1-111-1",
  "111-1-1-1-1111",
  "-11-1111-1-1-11",
  "111-1-11-1-1-1-1",
  "-11-111-1-111-1",
  "1-111-1-1111-1",
  "1111-1-1-1111",
  "1-1-11111-1-11",
  "1111-11-1-1-1-1",
  "-1-1-1-1-1111-11",
  "-1-1-1-111-1-11-1",
  "-11111-11-111",
  "-11-1-11-1-11-1-1",
  "111-1-111-1-11",
  "-11-11-11111-1",
  "1111-111-1-11",
  "-111111-11-11",
  "11-1-1-1-11111",
  "-1-11-111111-1",
  "-11-1-1111-11-1",
  "1-1-11-1-111-1-1",
  "1-1-1-11111-11",
  "11-1-11-11-111",
  "111-11-111-1-1",
  "11-1-11-1-1-111",
  "1-11111-1-11-1",
  "-1111-11-1111",
  "11111-111-1-1",
  "1-1-111-11-1-1-1",
  "-1-1111-1-1-11-1",
  "-1-11-1-11111-1",
  "-1111-1-1-1-1-1-1",
  "11-1-111-11-11",
  "111-1-1-11-1-1-1",
  "-11-1111111-1",
  "-1111-1-11-1-11",
  "1-1-111-1-1-1-11",
  "1111-1-11-1-1-1",
  "1-1-1111-111-1",
  "11-11111111",
  "111-1-1-1-1-1-11",
  "111-1-11-111-1",
  "1-11-1-111111",
  "-11111-1-1-111",
  "1111-1-1-1-1-11",
  "-11111-111-11",
  "1111-11-111-1",
  "11-1-1-11-1111",
  "11-1-1-1-1-1-1-1-1",
  "-11-1-11-1-1-11-1",
  "1-1-11-11-11-1-1",
  "11-1-1-1-11-1-11",
  "111-111-11-1-1",
  "11-1-1111-111",
  "-111-1111111",
  "111111-11-1-1",
  "1-1-11-1-11-11-1",
  "-1111-111-1-1-1",
  "-1-1-11-111111",
  "11-1-11-111-11",
  "111-11-11-11-1",
  "11-1-11-1-11-11",
  "1-1-1-111-1-111",
  "-1111-11-1-1-11",
  "-11-1-1-1111-1-1",
  "11111-11-11-1",
  "1-1-111-1111-1",
  "-1111-1-1-111-1",
  "11-111-1-1111",
  "11-1111-1-1-1-1",
  "111-1-1-1111-1",
  "1-11-1-1-1-1111",
  "-1111111-111",
  "1-11-1-11-1-1-1-1",
  "1111-1-1111-1",
  "11-1-1-111-1-1-1",
  "11-11111-1-11",
  "1-11-1-111-1-11",
  "-1-1-1-1-11-1-111",
  "-11111-1-11-11",
  "11-1-1-11-1-1-11",
  "-1-111-1111-1-1",
  "11-1-1-1-1-111-1",
  "1-1-1-1-1-11111",
  "-111-11-1-1111",
  "-111-111-1-1-1-1",
  "1-1-11-11-1-11-1",
  "11-11-1-111-1-1",
  "-1-1-11-1-1-1111",
  "-1-1-11-11-1-1-1-1",
  "111-111-1-11-1",
  "11-1-11111-11",
  "1-1-1-11-11-111",
  "-111-1111-1-11",
  "1-11-11-111-1-1",
  "-11-1-1-1-1-11-1-1",
  "111111-1-11-1",
  "-1111-11111-1",
  "11-111-11-1-1-1",
  "1-111-11-1-111",
  "-1-1-11-111-1-11",
  "1-1-1-111-11-11",
  "-1-1-1-11-11111",
  "1-11-1-1-11-1-1-1",
  "-11-1-1-111-11-1",
  "-11-11-1-1-1-111",
  "11-111-1-1-1-11",
  "11-1111-111-1",
  "-111-1-1-111-1-1",
  "-1-11-11-1-1-111",
  "1-11-1-1-1-1-1-11",
  "-1-1-1-1-1-11-111",
  "1-11-1-11-111-1",
  "-11111111-11",
  "-1-1-111-111-1-1",
  "-1-111-1-1-11-1-1",
  "11-1-1-11111-1",
  "1-1-1-1-11-1111",
  "1-1-1-1-1-1-1-1-1-1",
  "-111-11-11-1-1-1",
  "-1-1-1-1-11-11-11",
  "11-11-11-11-1-1",
  "1-1111-11111",
  "-1-1-11-1-11-1-1-1",
  "-1-111-111-11-1",
  "-1-111111111",
  "1-1-1-1-1-11-1-11",
  "-1-11-1-1-1-1-111",
  "1-11-111-11-1-1",
  "-111-111-111-1",
  "-111-11-1-1-1-11",
  "11-11-1-11-11-1",
  "1-111-1-11-111",
  "-1-1-11-1-1-1-1-11",
  "-1-1-11-11-111-1",
  "-11-111-1-1-111",
  "1-1-1-11-111-11",
  "-1-1-1-111-1111",
  "1-11-11-11-11-1",
  "-1-1-1-11-1-1-1-1-1",
  "-11-1-1-1-1-1-11-1",
  "-11-11-111-111",
  "11-111-1111-1",
  "1-111-11-11-11",
  "-111-1-11-11-1-1",
  "-1-11-1111-111",
  "-1-1-1-11-11-1-11",
  "1-11-1-1-1111-1",
  "-11-1-1111111",
  "-1-1-1111-11-1-1",
  "-11-11-1-1-11-11",
  "1-1-1-1-111-1-1-1",
  "-1-1-111111-1-1",
  "-111-1-1-11-11-1",
  "-1-11-11-1-11-11",
  "-1-1-1-1-1-111-11",
  "1-11111-1111",
  "-111-1-1111-1-1",
  "1-1111-1-1-1-1-1",
  "-1-1-111-11-11-1",
  "-1-111-1-1-1-11-1",
  "-1-1111-1-1111",
  "1-1-1-1-11-1-1-11",
  "-1-11111-1-1-1-1",
  "1-1-1-1-1-1-111-1",
  "-1-11-1-111-111",
  "-111-11-1111-1",
  "11-11-11-1-11-1",
  "1-1111-11-1-11",
  "-11-11111-111",
  "-1-1-11-1-1111-1",
  "1-1-1111-1-111",
  "-1-111111-1-11",
  "-1-11-1-1-1-11-11",
  "1-11-111-1-11-1",
  "-1-1-1-1111-1-1-1",
  "1-11-11111-1-1",
  "111-1-11-1-111",
  "-11-111-1-11-11",
  "1-111-1-111-11",
  "11-11-1111-1-1",
  "1111-11-1-111",
  "-1-1-1-111-1-1-11",
  "-1-1-1-11-1-111-1",
  "-11-1-11-1-1111",
  "-11-1-111-1-1-1-1",
  "-11-11-1111-11",
  "-1-111-1-111-1-1",
  "-1-1-111-1-11-1-1",
  "-111-1-11-1-11-1",
  "-1-11-11111-11",
  "-11-1-1111-1-11",
  "-111-1-1-1-11-1-1",
  "1-111111-1-1-1",
  "-1-1-1111-1-11-1",
  "1-1-11-1-11111",
  "-1-1111-11-1-1-1",
  "1-1-1-1-11111-1",
  "-1-1-11111-11-1",
  "111-11-11111",
  "1-11111-1-1-11",
  "-111-1-111-11-1",
  "1-1111-1-111-1",
  "11111-11111",
  "1-1-111-11-111",
  "-1-1111-1-1-1-11",
  "-1-11111-111-1",
  "-1-11-1-1111-11",
  "-1111-1-1-1-111",
  "-11-1-1-1-111-1-1",
  "1-11-11-1-11-1-1",
  "111-1-1-11-111",
  "-11-111111-11",
  "11-11-1-1-11-1-1",
  "1111-1-11-111",
  "1-1-1111-11-11",
  "-1-1-1-111111-1",
  "-11-1-11-11-1-1-1",
  "1-11-1111-11-1",
  "111-1-11-11-11",
  "-1-111-11-11-1-1",
  "11-11-111-11-1",
  "1111-11-11-11",
  "11-1-1-1-1-1-111",
  "-11-1-11-1-1-1-11",
  "-11-1-111-111-1",
  "1-1-11-11-1111",
  "1-1-11-1-1-1-1-1-1",
  "-1-1-111-1-1-11-1",
  "-1-111-1-11-11-1",
  "111-111-1111",
  "111-11-1-1-1-1-1",
  "-111-1-1-1-1-11-1",
  "1-11111111-1",
  "111111-1111",
  "1-1-11-1-11-1-11",
  "11111-1-1-1-1-1",
  "-1-1111-1111-1",
  "-1111-111-111",
  "-11-1-1-11-11-1-1",
  "111-11-11-1-11",
  "-11-1-1-111111",
  "11111-11-1-11",
  "1-1-111-111-11",
  "-1111-1-1-11-11",
  "11111111-1-1",
  "11-1111-1-111",
  "1-11-11-1-1-11-1",
  "-11-1-1-1-11-11-1",
  "111-1-1-111-11",
  "111-11111-1-1",
  "1-11-1-11-1-111",
  "11-11-1-1-1-11-1",
  "1111-1-111-11",
  "11-1-1-111-111",
  "1-1-11-1111-1-1",
  "-11-1-11-1111-1",
  "1-1-11-111-1-1-1",
  "-1-111-11-1-11-1",
  "-1-111-111111",
  "11-1-1-1-1-11-11",
  "111-1111-1-1-1",
  "-111-111-1-111",
  "1-1-11-11-1-1-11",
  "1111111-1-1-1",
  "1-1-11-1-1-111-1",
  "11-11-1-11111",
  "-1-1-11-11-1-111",
  "111-111-1-1-11",
  "111-11-1-111-1",
  "1-11-11-11111",
  "-11-1-1-1-1-1111",
  "111111-1-1-11",
  "-1111-1111-11",
  "11111-1-111-1",
  "-11-1-1-11-1-1-1-1",
  "11111-1-11-1-1",
  "11-111-11-111",
  "-11-1-1-11-1-11-1",
  "111-11-1-11-1-1",
  "1-11-1-1-11-111",
  "-11-1-1-111-1-11",
  "1-1-11-1-1-11-1-1",
  "1111111-11-1",
  "11-1111-11-11",
  "-111-1-1-11111",
  "111-1111-11-1",
  "1-11-1-11-11-11",
  "-1-1-111-11111",
  "-1-111-1-1-1111",
  "11-1-1-1111-11",
  "1-1-11-111-11-1",
  "-1-111-11-1-1-1-1",
  "1-1-1-1-1-1-1-111",
  "-111-11-11-111",
  "-11-1-11-111-1-1",
  "1-1-11-11111-1",
  "11-11-11-1111",
  "11-11-1-1-1-1-1-1",
  "-1-1-11-1-11-111",
  "-1-111-111-1-11",
  "111-111111-1",
  "1-11-111-1111",
  "-111-111-11-11",
  "1-11-11-1-1-1-1-1",
  "-11-1-1-1-11-1-1-1",
  "111111111-1",
  "11-11-1-11-1-11",
  "-1-1-11-11-11-11",
  "1-11-11-11-1-11",
  "-1-1-1-11-1-1-111",
  "-11-1-1-1-1-1-1-11",
  "-11-1-1-11-111-1",
  "-1-1111-111-1-1",
  "11111-1-1-11-1",
  "11-111-111-11",
  "-111-1-11-1111",
  "1-1111111-1-1",
  "-111-1-1-1-1-1-1-1",
  "111-11-1-1-11-1",
  "1-11-1-1-111-11",
  "-1-1-1111-1111",
  "-1-1-111-1-1-1-1-1",
  "1-1-11-1-1-1-11-1",
  "-1-111-1-11-1-1-1",
  "1-1-1-1-111-111",
  "-1-1-11111111",
  "-111-1-1-11-1-11",
  "-11-1-111-11-1-1",
  "11-11-111-1-1-1",
  "1-1111-1-1-111",
  "-1-1-111-11-1-11",
  "-1-111-1-1-1-1-11",
  "-1-111-11-111-1",
  "-111-1-111111",
  "-1-11111-1-111",
  "1-1-1-1-1-1-11-11",
  "-111-11-111-11",
  "1-11-1111-1-1-1",
  "-11-1-11-11-11-1",
  "-1-1-1-11111-1-1",
  "11-11-11-1-1-11",
  "11-11-1-1-111-1",
  "-1-1-11-1-111-11",
  "1-11-111-1-1-11",
  "-1-1-1-1111-111",
  "1-11-11-1-111-1",
  "1-11-1111111",
  "-11-1-1-1-1111-1",
  "-1-11111-11-1-1",
  "1-1111-1-11-1-1",
  "11-11-111111",
  "-111-1-111-1-1-1",
  "-1-1-1-11-1-11-11",
  "-11-1-111-1-111",
  "1-1-1-1-1111-1-1",
  "-1-1-11111-1-1-1",
  "-1-1111-11-11-1",
  "-1-111-1-11111",
  "-1-1-111-1-1111",
  "-111-1-11-1-1-11",
  "1-111111-11-1",
  "-1-1-1111-1-1-1-1",
  "-111-1-1-1-111-1",
  "-111-1-1-1-1111",
  "1-111111-111",
  "-1-1-1111-1-1-11",
  "-1-1-111-1-111-1",
  "-1-111-1-1111-1",
  "-111-1-11-1-1-1-1",
  "-1-1111-11-111",
  "1-1-1-1-1111-11",
  "-1-1-11111-1-11",
  "-11-1-111-1-11-1",
  "-1-1-1-11-1-11-1-1",
  "11-11-11111-1",
  "1-1111-1-11-11",
  "-111-1-111-1-11",
  "-1-11111-11-11",
  "1-11-111111-1",
  "1-11-11-1-1111",
  "-11-1-1-1-11111",
  "1-11-111-1-1-1-1",
  "-1-1-1-1111-11-1",
  "-1-1-11-1-111-1-1",
  "11-11-1-1-1111",
  "11-11-11-1-1-1-1",
  "-1-1-1-11111-11",
  "-11-1-11-11-111",
  "1-11-1111-1-11",
  "-111-11-111-1-1",
  "1-1-1-1-1-1-11-1-1",
  "-1-11111-1-11-1",
  "-1-111-11-1111",
  "-1-111-1-1-1-1-1-1",
  "1-1111-1-1-11-1",
  "11-11-111-1-11",
  "-1-1-111-11-1-1-1",
  "-111-1-11111-1",
  "-11-1-111-11-11",
  "-111-1-1-11-1-1-1",
  "1-1-1-1-111-11-1",
  "-1-1-1111111-1",
  "1-1-11-1-1-1-111",
  "-1-1-111-1-1-1-11",
  "-1-111-1-11-1-11",
  "-1-1-1111-111-1",
  "1-11-1-1-111-1-1",
  "111-11-1-1-111",
  "-111-1-1-1-1-1-11",
  "1-1111111-11",
  "-111-1-11-111-1",
  "11-111-111-1-1",
  "11111-1-1-111",
  "-1-1111-111-11",
  "-11-1-1-11-1111",
  "-11-1-1-1-1-1-1-1-1",
  "1-11-11-11-1-1-1",
  "-1-1-1-11-1-1-11-1",
  "-1-1-11-11-11-1-1",
  "11-11-1-11-1-1-1",
  "1111111111",
  "-11-1-1-1-11-1-11",
  "1-11-11-1-1-1-11",
  "-111-111-11-1-1",
  "1-11-111-111-1",
  "111-1111111",
  "-1-111-111-1-1-1",
  "-1-1-11-1-11-11-1",
  "11-11-1-1-1-1-11",
  "11-11-11-111-1",
  "1-1-11-111111",
  "-11-1-11-111-11",
  "-111-11-11-11-1",
  "1-1-1-1-1-1-1-11-1",
  "1-1-11-111-111",
  "11-1-1-1111-1-1",
  "-1-111-1-1-111-1",
  "-1-1-111-1111-1",
  "-1-111-11-1-1-11",
  "1-11-1-11-11-1-1",
  "111-1111-111",
  "-111-1-1-1111-1",
  "11-1111-11-1-1",
  "1111111-111",
  "1-1-11-1-1-11-11",
  "-11-1-1-111-1-1-1",
  "1-11-1-1-11-11-1",
  "111-11-1-11-11",
  "11-111-11-11-1",
  "11111-1-11-11",
  "-11-1-1-11-1-111",
  "11111-1-1111",
  "-11-1-1-11-1-1-11",
  "111111-1-1-1-1",
  "-1111-1111-1-1",
  "1-11-11-1111-1",
  "-11-1-1-1-1-111-1",
  "111-11-1-1111",
  "111-111-1-1-1-1",
  "-1-1-11-11-1-11-1",
  "11-11-1-1111-1",
  "1-1-11-1-1-1111",
  "1111111-1-11",
  "1-1-11-11-1-1-1-1",
  "-111-111-1-11-1",
  "111-1111-1-11",
  "11-1-1-1-1-11-1-1",
  "-1-111-11111-1",
  "1-1-11-111-1-11",
  "-1-111-11-1-111",
  "-11-1-11-11111",
  "1-1-11-1111-11",
  "11-1-1-111-11-1",
  "1111-1-111-1-1",
  "11-11-1-1-1-111",
  "1-11-1-11-1-11-1",
  "111-11111-11",
  "111-1-1-111-1-1",
  "1-11-11-1-1-111",
  "11-1111-1-11-1",
  "11111111-11",
  "-11-1-1-1-11-111",
  "1-1-111-111-1-1",
  "11111-11-1-1-1",
  "-1111-1-1-11-1-1",
  "-11-1-1-11111-1",
  "111-11-11-1-1-1",
  "-11-1-1-11-11-11",
  "-1-1111-11111",
  "11111-1-1-1-11",
  "1-1-11-1-11-1-1-1",
  "111111-111-1",
  "-1111-111-11-1",
  "1-111111111",
  "-111-1-1-1-1-111",
  "111-11-1-1-1-11",
  "111-111-111-1",
  "-1-1-111-1-1-111",
  "1-1-11-1-1-1-1-11",
  "-1-111-1-11-111",
  "1-1-11-11-111-1",
  "-11-1-111-1111",
  "-11-1-11-1-1-1-1-1",
  "11-1-1-1-1-1-11-1",
  "1111-11-11-1-1",
  "11-11-111-111",
  "-1-111-11-11-11",
  "111-1-11-11-1-1",
  "1-11-1111-111",
  "-11-1-11-11-1-11",
  "-1-1-1-1111111",
  "1-1-1111-11-1-1",
  "1111-1-11-11-1",
  "11-11-1-1-11-11",
  "-11-111111-1-1",
  "111-1-1-11-11-1",
  "1-11-11-1-11-11",
  "-11-1-1-1-111-11",
  "-1-11111-1111",
  "-1-11-1-1111-1-1",
  "1-1-111-11-11-1",
  "11111-1111-1",
  "-1-1111-1-1-1-1-1",
  "-1111-1-1-1-11-1",
  "1-1111-1-1111",
  "-111-1-111-111",
  "1-11111-1-1-1-1",
  "111-11-1111-1",
  "1-1-1-1-111111",
  "-1-1-11111-111",
  "-1-1111-11-1-11",
  "1-1-11-1-1111-1",
  "1-111111-1-11",
  "-1-1-1111-1-111",
  "-111-1-1-1-11-11",
  "-11-1-1111-1-1-1",
  "-1-11-11111-1-1",
  "-111-1-11-1-111",
  "-1-1-111-1-11-11",
  "-1-111-1-111-11",
  "-11-11-1111-1-1",
  "-11-1-111-1-1-11",
  "-1-1-1-11-1-1111",
  "-11-1-11-1-111-1",
  "-1-1-1-111-1-1-1-1",
  "1111-11-1-11-1",
  "11-11-1111-11",
  "1-111-1-111-1-1",
  "-11-111-1-11-1-1",
  "111-1-11-1-11-1",
  "1-11-11111-11",
  "1-11-111-1-111",
  "-1-1-1-1111-1-11",
  "-1-11-1-1-1-11-1-1",
  "1-1-1111-1-11-1",
  "-1-111111-1-1-1",
  "-1-1-11-1-11111",
  "1-1111-11-1-1-1",
  "11-11-11-1-111",
  "-11-11111-11-1",
  "-111-11-11111",
  "1-1-1-1-1-1-1111",
  "-1-11111-1-1-11",
  "1-1-1-1-11-1-1-1-1",
  "-1-1111-1-111-1",
  "-1-11-1-111-11-1",
  "-1-111-1-1-1-111",
  "1-1111-1-1-1-11",
  "-1-1-111-11-111",
  "1-11111-111-1",
  "-111-1-1111-11",
  "-1-1-1-1-1-111-1-1",
  "-1-11-11-1-11-1-1",
  "-111-1-1-11-111",
  "1-1-1-1-111-1-11",
  "-1-1-111111-11",
  "-11-11-1-1-11-1-1",
  "-1-1-1111-11-11",
  "1-11-1-1-11111",
  "-11-1-111111-1",
  "-1-1-1-11-11-1-1-1",
  "-1-11-1111-11-1",
  "-111-1-11-11-11",
  "1-111-11-11-1-1",
  "11-111-11111",
  "-11-11-111-11-1",
  "-11-1-1-1-1-1-111",
  "1-11-11-11-111",
  "-1-1-1-11-1-1-1-11",
  "1-1-1-11-111-1-1",
  "-1-1-1-111-111-1",
  "-1-1-11-11-1111",
  "1-111-1-11-11-1",
  "11-11-1-11-111",
  "-1-1-11-1-1-1-1-1-1",
  "-11-111-1-1-11-1",
  "-111-111-1111",
  "1-11-111-11-11",
  "-111-11-1-1-1-1-1",
  "1-1-1-1-1-11-1-1-1",
  "-1-11111111-1",
  "-1-11-1-1-1-1-11-1",
  "-1-111-111-111",
  "-1-1-11-1-11-1-11",
  "1-1111-1111-1",
  "11-11-11-11-11",
  "-1-1-1-1-11-11-1-1",
  "-111-11-11-1-11",
  "1-1-1-1-1-1-1-1-11",
  "1-1-1-1-11-111-1",
  "11-1-1-111111",
  "-1-111-1-1-11-11",
  "-1-1-111-111-11",
  "1-11-1-11-1111",
  "-11111111-1-1",
  "1-11-1-1-1-1-1-1-1",
  "-1-1-1-1-1-11-11-1",
  "-1-11-11-1-1-11-1",
  "-111-1-1-111-11",
  "11-1111-1111",
  "11-111-1-1-1-1-1",
  "-11-11-1-1-1-11-1",
  "-11-1-1-111-111",
  "1-11-1-1-11-1-11",
  "1-1-1-111-11-1-1",
  "-1-1-1-11-1111-1",
  "1-111-11-1-11-1",
  "11-111-11-1-11",
  "-1-1-11-111-1-1-1",
  "111111-1-111",
  "-1111-111111",
  "1-11-11-111-11",
  "-111-1111-1-1-1",
  "1-1-1-11-11-11-1",
  "-11-1-1-1-1-11-11",
  "11-1-11111-1-1",
  "111-111-1-111",
  "-1-1-11-11-1-1-11",
  "-1-1-11-1-1-111-1",
  "11-11-1-111-11",
  "1-1-11-11-1-111",
  "-111-111-1-1-11",
  "-111-11-1-111-1",
  "1-1-1-1-1-1111-1",
  "11-1-1-1-1-1111",
  "-1-111-1111-11",
  "11-1-1-11-1-1-1-1",
  "-11111-1-11-1-1",
  "1-11-1-111-1-1-1",
  "-1-1-1-1-11-1-11-1",
  "11-11111-1-1-1",
  "11-1-1-111-1-11",
  "1111-1-11111",
  "1-11-1-11-1-1-11",
  "-1111111-11-1",
  "1-11-1-1-1-111-1",
  "111-1-1-11111",
  "11-1111-1-1-11",
  "11-111-1-111-1",
  "1-1-111-11111",
  "11111-11-111",
  "-1111-1-1-1111",
  "-1111-11-1-1-1-1",
  "-11-1-1-1111-11",
  "1-1-1-111-1-11-1",
  "11-1-11-1-11-1-1",
  "111-11-11-111",
  "11-1-11-111-1-1",
  "-1-1-11-11111-1",
  "1-1-11-1-11-111",
  "111111-11-11",
  "-1111-111-1-11",
  "-111-111111-1",
  "11-1-1111-11-1",
  "111-111-11-11",
  "11-1-1-1-11-1-1-1",
  "1-1-11-11-11-11",
  "-11-1-11-1-1-111",
  "11-1-1-1-1-1-1-11",
  "11-1-1-11-111-1",
  "1111-11-1111",
  "1111-1-1-1-1-1-1",
  "-11111-1-1-11-1",
  "1-11-1-11111-1",
  "-11111-111-1-1",
  "111-1-11-1111",
  "111-1-1-1-1-1-1-1",
  "11-1111111-1",
  "1-1-1111-1111",
  "1111-1-11-1-11",
  "1-1-111-1-1-1-1-1",
  "-1111-1-11-1-1-1",
  "-11-11111111",
  "111-1-1-11-1-11",
  "11-1-111-11-1-1",
  "-1-11-1-111111",
  "1-1-111-11-1-11",
  "11111-111-11",
  "-1-1111-1-1-111",
  "-1111-1-1-1-1-11",
  "-1111-11-111-1",
  "1-11111-1-111",
  "11-1-11-1-1-11-1",
  "111-11-111-11",
  "11-1-11-11-11-1",
  "1-1-1-11111-1-1",
  "1-1-11-1-111-11",
  "-11-1-1111-111",
  "11-1-1-1-1111-1",
  "-1-11-1111111",
  "1111-111-1-1-1",
  "-111111-11-1-1",
  "111-1-111-1-1-1",
  "-11-11-111111",
  "-11-1-11-1-11-11",
  "-1-1-1-111-1-111",
  "1111-11-1-1-11",
  "1-1-11111-1-1-1",
  "1111-1-1-111-1",
  "-1-1-1-1-1111-1-1",
  "-11111-11-11-1",
  "1-111-1-11111",
  "-11-111-1-1111",
  "111-1-11-1-1-11",
  "-11-1111-1-1-1-1",
  "111-1-1-1-111-1"
];

let myRecs = [
  [42394, 87689, 42421],
  [158181, 219113, 157626],
  [106124, 87691, 102048],
  [158181, 133202, 82914],
  [104466, 49496, 49488],
  [42394, 105988, 114992],
  [106124, 302126, 102792],
  [71981, 219113, 149897],
  [87691, 106124, 69204],
  [133202, 102763, 45836],
  [42394, 85810, 69204],
  [42253, 102045, 84635],
  [102791, 49454, 49488],
  [42394, 85810, 114982],
  [167766, 49480, 49497],
  [158181, 102045, 324218],
  [106124, 102613, 102045],
  [87691, 307378, 104366],
  [133204, 59208, 162000],
  [42394, 82568, 82573],
  [158181, 82577, 130167],
  [158181, 49462, 49489],
  [71981, 219113, 149897],
  [158181, 284198, 84635],
  [106124, 336138, 59202],
  [71981, 130170, 59212],
  [84635, 102835, 219114],
  [42394, 85810, 105988],
  [106124, 161437, 87692],
  [42394, 114968, 114992],
  [102676, 143233, 167766],
  [55686, 49423, 219112],
  [42394, 106124, 161437],
  [161437, 49435, 49464],
  [87691, 37846, 82570],
  [133202, 72056, 49460],
  [269032, 336138, 167758],
  [158181, 219112, 114968],
  [158181, 149447, 157674],
  [102792, 102740, 124792],
  [132236, 163965, 133203],
  [130167, 104472, 49453],
  [158181, 149448, 45855],
  [50796, 104472, 49419],
  [106124, 336138, 102835],
  [158181, 58772, 102952],
  [162000, 49338, 143232],
  [45809, 44308, 49456],
  [103024, 87691, 307378],
  [50059, 167763, 49377],
  [114973, 219113, 49401],
  [194620, 167763, 49480],
  [158181, 59212, 74990],
  [42394, 162001, 84635],
  [102943, 67205, 82577],
  [219112, 59199, 72056],
  [158181, 82570, 42253],
  [158181, 201656, 49419],
  [45815, 42421, 101711],
  [184827, 114973, 69204],
  [114968, 114973, 114992],
  [42394, 106124, 87689],
  [149728, 102947, 87691],
  [150037, 130170, 59207],
  [71981, 308014, 72177],
  [106124, 82634, 87691],
  [42394, 114968, 71981],
  [69204, 161437, 71981],
  [167773, 44308, 49456],
  [42394, 85904, 324218],
  [42394, 114992, 105988],
  [161437, 106124, 69204],
  [158181, 106124, 59210],
  [149897, 72056, 102048],
  [194619, 102740, 320528],
  [219112, 59192, 84635],
  [42394, 114973, 87689],
  [55686, 72056, 85904],
  [114973, 114992, 114982],
  [158181, 45782, 45785],
  [50796, 145300, 49435],
  [106124, 34120, 308014],
  [158181, 49454, 85904],
  [161437, 106124, 69204],
  [42394, 150033, 102835],
  [158181, 49442, 332494],
  [45802, 49460, 49451],
  [158181, 49451, 49401],
  [45803, 102975, 87692],
  [42394, 67205, 104466],
  [106124, 45833, 49419],
  [132237, 59213, 157675],
  [42394, 45852, 85810],
  [161437, 114982, 69204],
  [103024, 101735, 114981],
  [161437, 194619, 104398],
  [42927, 45828, 130170],
  [42394, 184827, 302126],
  [42394, 105988, 114992],
  [150037, 102046, 102763],
  [45789, 104447, 161437],
  [69204, 59212, 102791],
  [106124, 71981, 161437],
  [87689, 106124, 161437],
  [42394, 106124, 87691],
  [42394, 124792, 45802],
  [106124, 45852, 87689],
  [133206, 49446, 42421],
  [49497, 149728, 149448],
  [106124, 104447, 284198],
  [42394, 114981, 114968],
  [158181, 332495, 194620],
  [42394, 114973, 114981],
  [104466, 82809, 149940],
  [69204, 106124, 71981],
  [158181, 45855, 102791],
  [106124, 71981, 69204],
  [71981, 87689, 161437],
  [114968, 162001, 149447],
  [42394, 49461, 149940],
  [158181, 130170, 150043],
  [42394, 87691, 95643],
  [106124, 45852, 87692],
  [106124, 87692, 87691],
  [161437, 87692, 69204],
  [82476, 42394, 87691],
  [87691, 71981, 69204],
  [42394, 85810, 114992],
  [71981, 87692, 106124],
  [42394, 102046, 85904],
  [219112, 130169, 84635],
  [42394, 87689, 106124],
  [42394, 106124, 71981],
  [42394, 114992, 106124],
  [106124, 163962, 49419],
  [42394, 114973, 87689],
  [42394, 106124, 69204],
  [114992, 114982, 114981],
  [114982, 324218, 104398],
  [42394, 49446, 44308],
  [42394, 82476, 106124],
  [158181, 143233, 194619],
  [158181, 82914, 104512],
  [42394, 320528, 87692],
  [87689, 87692, 71981],
  [49497, 324218, 82570],
  [69204, 71981, 161437],
  [163965, 49454, 49423],
  [42394, 105988, 114992],
  [42394, 114968, 114992],
  [149728, 102613, 82570],
  [87691, 87692, 69204],
  [71981, 37846, 102048],
  [161437, 87691, 106124],
  [42394, 284198, 320528],
  [158181, 163964, 59210],
  [167774, 45855, 130164],
  [42505, 95643, 102943],
  [161437, 49435, 49464],
  [42394, 114992, 114968],
  [42394, 114968, 71981],
  [114968, 114973, 114981],
  [87689, 106124, 69204],
  [164143, 49401, 85904],
  [45802, 114982, 45785],
  [106124, 114981, 71981],
  [114968, 71981, 87691],
  [161437, 71981, 106124],
  [42394, 114968, 114992],
  [114968, 102046, 85904],
  [106124, 49378, 49456],
  [42394, 105988, 48675],
  [42394, 114968, 106124],
  [161437, 87691, 71981],
  [71981, 45852, 161437],
  [87689, 69204, 45852],
  [42394, 42535, 87689],
  [133209, 49419, 130169],
  [42394, 49378, 42368],
  [42394, 49338, 149448],
  [87692, 161437, 69204],
  [45852, 161437, 69204],
  [69204, 106124, 161437],
  [158181, 102614, 102763],
  [45798, 49456, 219113],
  [87691, 87692, 42394],
  [158181, 82567, 219114],
  [42394, 114992, 114982],
  [87689, 104512, 324218],
  [106124, 159130, 71981],
  [102613, 49496, 145298],
  [87692, 87691, 161437],
  [114982, 58772, 150064],
  [69204, 71981, 87689],
  [42394, 106124, 71981],
  [106124, 219114, 76611],
  [132237, 201656, 163963],
  [42394, 114992, 114982],
  [161437, 159130, 308014],
  [149940, 219113, 59200],
  [106124, 87689, 45852],
  [45802, 164373, 42927],
  [42394, 104366, 87692],
  [42394, 87692, 114968],
  [42394, 114992, 114968],
  [161437, 194619, 104398],
  [45845, 49416, 42421],
  [163964, 59209, 85904],
  [42394, 59207, 130170],
  [158181, 49497, 42368],
  [45852, 102977, 102954],
  [133206, 102740, 49423],
  [158181, 49451, 332495],
  [69204, 71981, 87689],
  [106124, 102792, 69930],
  [158181, 324218, 149728],
  [87691, 102048, 302126],
  [45845, 59208, 49385],
  [158181, 45798, 45815],
  [42394, 114992, 114968],
  [106124, 184827, 69204],
  [42394, 72056, 85904],
  [157626, 163962, 45820],
  [133202, 72198, 104398],
  [82809, 219112, 45803],
  [87691, 161437, 106124],
  [158181, 42370, 84635],
  [42394, 114973, 114982],
  [45799, 219113, 59198],
  [106124, 161437, 71981],
  [42394, 114973, 87689],
  [55686, 84635, 149729],
  [106124, 102676, 102835],
  [106124, 49480, 49435],
  [133204, 72056, 102048],
  [42394, 72177, 161437],
  [104512, 102952, 59193],
  [114968, 114992, 114982],
  [42394, 114973, 106124],
  [45782, 137454, 104447],
  [42394, 201656, 49449],
  [158181, 49491, 49461],
  [71981, 102614, 59210],
  [45793, 59194, 42421],
  [106124, 59207, 49442],
  [45789, 59207, 59194],
  [49451, 49450, 49423],
  [42394, 45845, 49451],
  [158181, 167758, 130167],
  [42394, 42505, 106124],
  [149729, 49450, 82914],
  [158181, 101711, 157625],
  [104466, 49491, 145298],
  [106124, 87689, 336138],
  [42394, 44308, 49453],
  [158181, 45802, 82577],
  [133211, 164143, 45815],
  [102954, 336138, 49472],
  [130164, 164143, 82570],
  [158181, 130164, 85810],
  [158181, 149448, 82809],
  [104384, 49444, 130169],
  [87691, 37846, 82570],
  [102613, 149447, 82573],
  [42394, 71981, 114992],
  [87691, 219112, 72198],
  [72056, 59208, 49401],
  [42394, 49446, 44308],
  [42394, 85810, 114992],
  [42394, 114968, 114992],
  [45802, 103674, 82476],
  [106124, 49338, 130169],
  [72177, 49462, 37846],
  [158181, 102763, 59210],
  [87691, 106124, 87689],
  [45852, 45793, 130167],
  [158181, 82570, 49377],
  [158181, 45824, 45815],
  [114968, 150064, 150040],
  [102943, 324218, 159130],
  [106124, 49480, 82809],
  [133205, 137454, 133207],
  [158181, 72198, 76611],
  [45794, 167763, 143232],
  [42394, 114973, 114992],
  [59208, 219113, 72198],
  [42394, 50796, 87692],
  [82634, 49450, 49416],
  [82577, 49460, 49451],
  [87691, 87692, 87689],
  [45852, 45793, 130167],
  [47809, 324218, 284198],
  [42394, 114992, 114968],
  [158181, 332495, 130169],
  [37846, 102791, 48372],
  [158181, 49378, 49480],
  [336138, 34120, 87691],
  [45820, 137454, 59203],
  [42394, 114992, 106124],
  [158181, 219113, 194620],
  [114992, 105988, 69204],
  [158181, 133202, 82914],
  [42394, 114982, 105988],
  [42394, 114973, 114992],
  [71981, 219113, 149897],
  [42394, 105988, 45852],
  [150039, 49377, 85810],
  [106124, 102045, 82574],
  [106124, 102969, 102792],
  [133211, 163964, 76076],
  [42394, 114968, 106124],
  [42394, 114968, 114992],
  [42394, 114968, 114982],
  [45851, 114968, 167758],
  [106124, 114968, 85810],
  [71981, 72177, 307378],
  [308014, 87692, 102048],
  [42394, 49338, 82573],
  [71981, 219113, 130169],
  [47809, 37846, 102835],
  [161437, 45852, 106124],
  [47809, 106124, 37846],
  [87689, 106124, 161437],
  [42394, 114973, 114992],
  [167773, 167758, 130169],
  [49496, 149448, 84635],
  [94025, 133206, 84635],
  [42394, 72177, 94025],
  [82914, 143232, 167763],
  [87689, 87692, 161437],
  [42394, 48675, 324218],
  [158181, 219112, 132236],
  [104398, 42368, 145302],
  [45803, 104472, 49453],
  [42394, 87689, 45852],
  [158181, 130169, 332494],
  [105988, 114992, 114981],
  [42394, 87689, 320528],
  [114992, 114982, 114981],
  [42394, 114973, 106124],
  [106124, 87689, 104447],
  [42394, 114968, 106124],
  [45794, 219114, 167766],
  [42394, 114992, 114982],
  [42394, 106124, 85810],
  [219114, 59210, 145300],
  [55686, 67205, 82573],
  [158181, 201656, 49411],
  [149729, 49385, 42421],
  [106124, 69204, 71981],
  [87692, 71981, 87691],
  [106124, 87691, 71981],
  [114992, 114982, 114981],
  [42394, 150043, 149448],
  [42394, 87689, 45852],
  [114982, 150043, 45798],
  [71981, 219113, 150064],
  [161437, 159130, 69204],
  [158181, 130164, 150043],
  [47809, 106124, 102676],
  [42394, 114968, 106124],
  [42394, 49446, 44308],
  [161437, 87692, 87691],
  [158181, 45782, 45785],
  [114973, 114992, 114982],
  [158181, 105988, 82577],
  [106124, 87689, 45852],
  [161437, 114968, 69204],
  [42394, 37846, 106124],
  [106124, 71981, 87692],
  [184827, 37846, 102954],
  [42394, 85810, 114982],
  [42394, 106124, 71981],
  [87689, 45852, 106124],
  [42394, 102954, 82476],
  [102676, 201656, 150038],
  [49497, 49411, 130170],
  [42394, 106124, 71981],
  [42394, 49462, 150040],
  [42394, 106124, 69204],
  [114973, 194619, 84635],
  [106124, 72177, 37846],
  [103024, 45852, 159130],
  [42394, 106124, 87691],
  [158181, 150033, 130164],
  [132237, 201656, 45803],
  [45812, 103674, 82476],
  [87691, 161437, 69204],
  [45852, 69204, 106124],
  [158181, 69204, 159130],
  [106124, 307378, 284198],
  [219112, 82809, 59209],
  [45798, 219112, 59198],
  [106124, 71981, 87691],
  [42394, 85810, 114982],
  [50059, 45802, 49377],
  [42394, 114968, 114981],
  [45854, 102977, 159130],
  [158181, 219114, 130164],
  [158181, 84635, 194619],
  [74990, 162000, 49435],
  [42394, 70115, 87691],
  [82914, 201656, 163964],
  [158181, 130164, 150040],
  [114992, 105988, 114982],
  [114973, 149728, 49486],
  [106124, 102792, 82809],
  [102048, 102614, 59202],
  [67205, 102046, 57049],
  [87689, 87692, 105988],
  [114992, 49416, 143233],
  [158181, 149935, 149447],
  [150038, 45798, 167763],
  [42394, 105988, 161437],
  [42394, 87692, 114973],
  [102613, 102835, 300187],
  [101764, 300187, 49378],
  [45854, 269032, 114982],
  [42394, 85810, 105988],
  [114982, 102792, 102676],
  [102045, 124792, 59197],
  [42394, 101687, 103024],
  [45801, 219112, 102048],
  [45785, 102952, 219113],
  [42394, 42535, 76076],
  [87689, 87692, 106124],
  [71981, 106124, 87692],
  [106124, 164372, 102614],
  [42394, 106124, 71981],
  [42394, 102835, 87692],
  [45803, 102947, 87691],
  [158181, 82568, 103423],
  [158181, 76611, 102613],
  [161437, 150039, 59210],
  [158181, 82570, 82634],
  [47809, 103024, 102676],
  [49400, 87692, 45812],
  [45854, 164143, 150040],
  [106124, 114968, 85810],
  [158181, 130167, 157675],
  [42394, 114973, 114992],
  [114992, 87692, 69204],
  [106124, 102835, 104447],
  [82574, 85904, 219112],
  [42394, 94025, 184827],
  [87691, 71981, 161437],
  [158181, 42368, 150040],
  [163965, 49446, 49435],
  [150033, 219113, 58772],
  [167758, 167766, 49411],
  [42394, 104371, 103511],
  [106124, 72198, 324218],
  [114973, 149942, 150064],
  [114982, 114973, 114968],
  [42394, 87689, 45852],
  [150043, 59207, 76611],
  [158181, 67205, 72056],
  [76611, 219114, 59209],
  [45841, 102614, 102045],
  [149728, 102952, 219113],
  [150039, 219114, 76076],
  [45854, 59208, 124792],
  [106124, 103024, 284198],
  [106124, 336138, 71981],
  [42394, 85810, 69204],
  [106124, 49416, 49480],
  [87692, 87691, 161437],
  [42394, 82577, 130167],
  [161437, 87689, 69204],
  [106124, 59209, 49419],
  [82634, 49451, 49480],
  [161437, 72177, 302126],
  [82914, 102046, 219112],
  [45852, 161437, 71981],
  [42394, 114982, 106124],
  [45834, 150039, 130167],
  [42394, 145301, 49442],
  [42394, 85810, 105988],
  [42394, 87689, 106124],
  [132237, 102048, 49464],
  [158181, 102613, 59212],
  [158181, 164373, 102614],
  [87689, 49442, 59207],
  [158181, 143233, 145295],
  [149935, 45785, 49428],
  [45820, 49428, 143232],
  [42499, 302126, 308014],
  [106124, 49446, 49480],
  [87692, 37846, 45802],
  [104384, 49489, 332495],
  [161437, 106124, 87692],
  [158181, 59209, 59194],
  [114982, 150043, 45798],
  [101764, 82809, 59203],
  [42394, 106124, 69204],
  [269032, 76076, 82574],
  [106124, 87691, 71981],
  [106124, 87692, 45852],
  [82476, 47809, 72177],
  [149935, 133203, 42927],
  [114981, 114973, 114968],
  [87692, 102046, 102613],
  [106124, 336138, 45841],
  [45799, 45855, 45815],
  [104447, 42368, 145300],
  [42394, 320528, 87692],
  [45809, 59208, 49639],
  [163962, 59208, 76076],
  [42394, 103024, 302126],
  [158181, 49456, 42060],
  [158181, 163964, 164143],
  [42394, 114973, 106124],
  [158181, 49442, 332495],
  [159130, 102792, 59212],
  [158181, 45802, 150033],
  [87692, 104398, 94025],
  [42394, 114992, 114982],
  [114973, 49401, 58772],
  [42394, 106124, 71981],
  [42394, 114992, 114982],
  [42394, 105988, 85810],
  [45845, 102048, 49464],
  [87691, 161437, 69204],
  [42394, 114973, 114982],
  [133206, 102952, 219113],
  [158181, 307378, 82568],
  [42394, 150033, 102947],
  [87689, 106124, 87692],
  [106124, 102046, 284198],
  [42394, 50796, 308014],
  [114982, 114992, 114981],
  [114981, 114992, 114982],
  [45852, 49401, 50796],
  [106124, 71981, 69204],
  [219113, 45801, 300187],
  [42394, 114973, 106124],
  [158181, 49489, 49456],
  [106124, 324218, 308014],
  [106124, 114968, 85810],
  [106124, 87692, 45852],
  [158181, 45845, 49416],
  [42394, 49444, 49451],
  [85810, 105988, 114992],
  [69204, 71981, 161437],
  [106124, 159130, 102835],
  [158181, 150043, 102614],
  [42394, 114968, 87689],
  [71981, 69204, 45852],
  [42394, 104371, 324218],
  [42394, 106124, 69204],
  [42394, 114968, 114992],
  [114968, 87692, 105988],
  [158181, 49444, 149942],
  [159130, 59209, 336138],
  [42394, 49444, 42370],
  [184827, 269032, 42499],
  [42394, 114992, 114968],
  [132237, 149921, 150038],
  [161437, 87692, 87691],
  [308014, 302126, 55686],
  [158181, 82573, 42253],
  [161437, 106124, 87692],
  [158181, 42927, 133210],
  [42394, 85810, 105988],
  [102614, 67205, 133214],
  [87691, 45852, 71981],
  [161437, 71981, 87692],
  [106124, 103024, 37846],
  [149897, 82567, 102045],
  [106124, 45852, 87692],
  [42394, 114968, 114992],
  [114982, 114968, 114992],
  [103511, 59203, 59193],
  [149921, 42370, 49411],
  [161437, 87689, 87692],
  [42394, 94025, 103511],
  [87689, 106124, 161437],
  [106124, 103024, 284198],
  [149447, 102952, 159130],
  [158181, 149921, 149729],
  [106124, 87689, 87692],
  [158181, 219113, 82577],
  [42394, 320528, 87691],
  [161437, 87692, 87691],
  [42394, 114973, 87689],
  [158181, 104398, 76611],
  [42394, 133211, 37846],
  [42394, 114982, 87692],
  [42394, 106124, 71981],
  [82809, 167763, 49416],
  [45854, 133213, 133210],
  [106124, 284198, 102835],
  [72177, 42370, 104398],
  [42394, 114968, 114992],
  [42394, 105988, 114992],
  [150038, 42370, 219112],
  [158181, 194620, 324218],
  [82634, 49419, 219114],
  [87689, 106124, 69204],
  [87692, 71981, 87691],
  [106124, 45852, 87689],
  [163963, 85904, 45854],
  [45845, 103674, 82476],
  [85810, 105988, 114982],
  [161437, 49435, 49464],
  [45841, 149921, 49419],
  [106124, 44308, 72198],
  [158181, 104398, 102046],
  [45802, 70115, 87689],
  [42394, 106124, 87691],
  [69930, 194619, 167766],
  [161437, 106124, 87692],
  [158181, 49456, 42060],
  [42394, 114973, 87691],
  [167774, 167763, 130169],
  [45828, 49435, 162000],
  [102969, 55686, 69204],
  [104366, 42059, 49416],
  [158181, 133213, 157675],
  [132236, 67205, 45802],
  [45798, 102975, 59213],
  [82668, 49449, 49411],
  [82476, 87689, 87692],
  [158181, 45793, 45785],
  [45845, 49451, 49480],
  [158181, 49378, 49480],
  [42394, 106124, 87691],
  [106124, 159130, 102676],
  [158181, 82577, 45802],
  [82809, 49453, 49486],
  [114968, 114992, 85810],
  [42394, 114973, 106124],
  [106124, 102969, 104447],
  [42394, 44308, 49453],
  [106124, 49446, 167774],
  [69204, 37846, 336138],
  [158181, 82567, 150064],
  [72177, 104398, 149729],
  [42394, 106124, 71981],
  [42394, 114973, 114982],
  [157625, 124792, 59194],
  [106124, 87692, 102676],
  [158181, 59208, 72177],
  [106124, 94025, 307378],
  [106124, 87691, 71981],
  [42394, 85904, 37846],
  [149937, 49411, 49419],
  [149729, 49464, 49401],
  [42394, 114992, 114982],
  [42394, 103024, 114973],
  [149936, 72198, 45815],
  [47809, 106124, 37846],
  [42394, 49444, 42370],
  [82809, 149447, 150033],
  [69204, 130169, 102791],
  [42394, 101764, 59200],
  [69930, 133212, 102048],
  [42394, 307378, 320528],
  [161437, 87692, 87691],
  [157674, 82567, 219112],
  [71981, 42499, 94025],
  [42394, 320528, 87691],
  [106124, 87689, 87692],
  [157674, 45798, 42370],
  [158181, 324218, 104466],
  [42394, 102952, 85810],
  [114992, 71981, 48675],
  [106124, 82634, 82668],
  [161437, 45809, 49450],
  [102791, 76076, 102048],
  [47809, 159130, 103024],
  [149935, 72056, 45815],
  [42394, 114968, 114992],
  [42253, 49416, 49453],
  [42394, 159130, 82476],
  [167758, 167766, 42927],
  [161437, 87692, 87691],
  [106124, 159130, 102048],
  [114968, 102045, 324218],
  [302126, 102792, 104398],
  [158181, 82568, 157626],
  [157625, 124792, 59194],
  [42394, 85810, 105988],
  [106124, 114981, 71981],
  [87689, 149942, 102676],
  [158181, 82568, 307378],
  [106124, 94025, 102835],
  [219112, 59202, 59198],
  [164373, 102947, 219112],
  [47809, 94025, 69204],
  [42394, 114992, 114982],
  [102614, 49454, 49488],
  [47809, 102046, 284198],
  [42394, 114982, 87692],
  [158181, 150043, 76076],
  [161437, 114968, 69204],
  [158181, 219114, 82567],
  [101735, 42368, 49449],
  [42394, 48675, 70115],
  [158181, 45782, 45785],
  [45855, 85904, 194620],
  [130170, 59210, 45802],
  [42394, 42368, 49442],
  [158181, 157625, 149447],
  [45803, 102045, 49466],
  [34120, 307378, 102943],
  [324218, 133203, 42060],
  [114981, 130169, 49496],
  [87689, 106124, 42394],
  [158181, 49451, 82567],
  [87689, 106124, 87692],
  [59205, 49401, 59212],
  [42394, 161437, 114973],
  [201656, 219113, 59200],
  [71981, 219114, 69930],
  [332494, 82668, 150040],
  [158181, 150038, 49411],
  [42394, 49446, 44308],
  [114981, 114992, 114982],
  [45845, 137454, 94025],
  [106124, 163964, 82809],
  [106124, 71981, 161437],
  [71981, 106124, 161437],
  [106124, 87692, 87691],
  [132236, 102045, 145298],
  [59210, 104398, 72056],
  [133202, 149921, 150038],
  [42394, 105988, 114992],
  [42394, 85810, 105988],
  [87689, 49400, 72198],
  [47809, 102969, 324218],
  [45855, 69930, 133211],
  [106124, 114968, 85810],
  [42394, 106124, 87691],
  [114982, 82668, 74990],
  [158181, 59210, 102791],
  [133215, 42421, 49419],
  [106124, 184827, 105988],
  [71981, 106124, 87689],
  [42394, 103024, 42505],
  [49400, 58772, 82568],
  [87692, 87691, 106124],
  [163965, 49446, 49435],
  [149447, 104384, 219114],
  [42394, 308014, 42505],
  [106124, 87692, 87691],
  [106124, 87692, 71981],
  [122090, 42060, 164143],
  [42394, 114973, 87691],
  [114968, 114973, 114981],
  [133203, 137454, 82476],
  [45852, 87689, 161437],
  [42394, 85810, 114982],
  [159130, 34120, 308014],
  [45782, 59193, 59208],
  [87692, 87691, 71981],
  [87692, 71981, 45852],
  [82914, 137454, 58772],
  [42394, 114968, 114992],
  [158181, 45801, 157625],
  [87692, 71981, 106124],
  [158181, 49486, 49453],
  [307378, 106124, 59210],
  [106124, 87692, 87689],
  [150038, 42370, 219112],
  [42394, 114982, 105988],
  [161437, 45809, 49450],
  [42394, 320528, 87692],
  [106124, 102792, 336138],
  [158181, 49491, 49338],
  [42394, 105988, 71981],
  [42394, 85810, 114982],
  [42394, 87692, 69204],
  [114981, 104366, 82476],
  [87692, 71981, 45852],
  [42394, 87689, 45852],
  [106124, 159130, 102835],
  [87689, 87691, 69204],
  [114982, 114981, 114973],
  [158181, 219114, 59207],
  [167758, 167766, 49411],
  [69204, 87689, 106124],
  [114981, 201656, 163964],
  [42394, 106124, 71981],
  [336138, 45852, 59210],
  [158181, 82573, 49377],
  [45803, 336138, 219114],
  [106124, 87689, 87692],
  [45845, 49377, 284198],
  [85810, 105988, 114968],
  [161437, 114973, 69204],
  [114992, 114982, 114968],
  [42394, 336138, 42535],
  [106124, 87691, 336138],
  [106124, 71981, 69204],
  [87691, 45783, 84635],
  [58772, 49453, 42370],
  [106124, 324218, 72056],
  [42394, 114992, 105988],
  [71981, 161437, 87689],
  [130170, 149942, 49435],
  [42394, 101687, 324218],
  [42394, 105988, 114992],
  [42394, 106124, 69204],
  [42394, 49338, 49486],
  [42394, 105988, 71981],
  [106124, 34120, 308014],
  [158181, 49423, 49435],
  [106124, 157675, 59212],
  [158181, 49449, 332494],
  [161437, 114973, 69204],
  [42394, 82914, 150037],
  [158181, 49453, 82570],
  [87689, 102835, 42394],
  [106124, 82634, 163965],
  [150038, 42059, 42421],
  [336138, 45803, 45801],
  [132236, 85904, 145298],
  [87692, 102046, 102613],
  [114968, 114992, 114982],
  [149728, 59205, 102045],
  [161437, 114973, 42535],
  [163962, 164372, 114973],
  [42394, 103024, 306773],
  [161437, 87692, 106124],
  [161437, 87692, 87691],
  [106124, 114968, 69204],
  [269032, 76076, 82574],
  [106124, 102676, 102791],
  [42394, 150043, 150064],
  [106124, 87689, 71981],
  [158181, 55686, 76076],
  [133209, 49639, 59213],
  [49466, 149897, 49428],
  [219112, 82914, 59198],
  [42394, 48675, 103511],
  [45801, 45783, 49444],
  [42394, 45803, 49466],
  [158181, 82568, 130164],
  [133202, 133213, 219112],
  [307378, 59212, 82809],
  [158181, 324218, 59194],
  [45854, 102046, 49435],
  [114981, 114992, 114982],
  [42394, 85810, 105988],
  [42394, 49453, 149936],
  [158181, 194619, 163963],
  [42394, 105988, 114992],
  [106124, 87691, 87689],
  [72177, 284198, 55686],
  [158181, 219112, 76076],
  [82809, 49451, 49480],
  [69204, 161437, 106124],
  [219112, 59198, 59208],
  [114981, 130167, 82634],
  [219112, 167763, 59205],
  [42394, 106124, 85810],
  [71981, 106124, 161437],
  [106124, 269032, 37846],
  [82668, 150039, 149921],
  [106124, 49423, 143233],
  [104384, 104512, 300187],
  [219113, 104512, 300187],
  [42394, 101735, 306773],
  [42394, 102614, 42421],
  [106124, 67205, 163964],
  [158181, 307378, 69930],
  [114981, 114982, 114973],
  [42394, 114968, 87689],
  [82573, 158181, 59197],
  [164143, 59207, 85904],
  [106124, 102046, 103024],
  [132236, 49404, 85810],
  [158181, 45854, 130167],
  [158181, 149921, 149729],
  [49466, 49453, 82570],
  [42394, 336138, 106124],
  [71981, 106124, 161437],
  [45855, 59203, 102791],
  [94025, 102046, 87691],
  [42394, 114968, 106124],
  [42394, 105988, 114992],
  [158181, 82568, 157625],
  [42394, 106124, 71981],
  [157674, 163965, 150039],
  [106124, 284198, 102835],
  [45851, 72056, 45820],
  [34120, 72056, 59210],
  [158181, 58772, 332494],
  [158181, 332495, 42394],
  [42394, 103024, 302126],
  [106124, 114968, 85810],
  [164373, 102947, 59192],
  [158181, 332494, 59197],
  [106124, 87692, 71981],
  [106124, 45852, 87689],
  [133215, 85904, 49442],
  [45845, 102952, 219113],
  [150038, 149448, 114968],
  [149448, 72198, 104398],
  [42394, 320528, 87692],
  [114981, 102943, 82570],
  [45798, 45782, 45789],
  [42394, 114968, 114992],
  [133205, 101687, 219113],
  [106124, 162001, 42368],
  [45789, 219114, 102943],
  [42394, 161437, 87692],
  [42394, 106124, 71981],
  [104466, 59205, 49456],
  [158181, 149937, 149447],
  [42394, 114973, 87692],
  [167774, 167763, 130169],
  [45854, 42059, 49416],
  [104384, 194620, 149936],
  [55686, 85904, 219113],
  [42394, 49419, 49411],
  [105988, 85810, 114981],
  [158181, 133211, 49480],
  [150040, 219113, 150037],
  [101687, 72177, 42499],
  [82809, 49338, 49461],
  [158181, 49378, 49480],
  [158181, 67205, 72198],
  [87691, 114992, 42394],
  [71981, 219113, 194619],
  [45798, 104447, 101795],
  [87689, 106124, 87692],
  [42394, 114968, 114992],
  [106124, 48372, 49419],
  [336138, 69204, 102835],
  [158181, 159130, 104466],
  [45793, 49428, 49442],
  [106124, 71981, 45852],
  [87692, 106124, 87691],
  [45794, 332495, 219113],
  [158181, 102614, 102045],
  [158181, 45793, 65281],
  [42394, 105988, 184827],
  [106124, 47809, 324218],
  [103024, 102046, 307378],
  [42394, 150064, 85904],
  [42394, 106124, 71981],
  [42394, 145301, 49442],
  [42394, 71981, 45852],
  [122090, 49446, 49428],
  [42394, 48675, 55686],
  [59212, 72056, 69930],
  [106124, 161437, 87692],
  [114981, 71981, 69204],
  [42394, 114968, 114992],
  [42394, 324218, 320528],
  [87689, 87692, 161437],
  [320528, 101735, 42394],
  [42394, 114973, 106124],
  [87691, 161437, 106124],
  [158181, 149447, 45834],
  [158181, 45802, 45789],
  [106124, 87691, 87689],
  [42394, 114992, 114968],
  [114992, 87692, 69204],
  [161437, 49435, 49464],
  [47809, 324218, 72177],
  [158181, 45815, 49480],
  [106124, 34120, 308014],
  [50059, 167766, 149937],
  [42394, 150043, 150064],
  [55686, 149936, 104512],
  [114992, 114973, 114982],
  [42394, 114968, 106124],
  [161437, 87692, 87691],
  [71981, 106124, 161437],
  [87691, 87689, 71981],
  [45801, 59193, 284198],
  [42394, 82577, 49444],
  [87692, 104398, 130170],
  [149937, 102740, 219113],
  [42394, 85810, 69204],
  [42394, 114992, 114982],
  [161437, 87691, 69204],
  [47809, 102835, 284198],
  [184827, 114968, 114981],
  [49480, 44308, 49411],
  [42394, 87689, 106124],
  [114982, 102835, 306773],
  [114981, 114992, 85810],
  [158181, 45802, 82577],
  [42394, 114968, 87689],
  [133202, 102613, 45834],
  [106124, 161437, 49491],
  [158181, 130164, 85810],
  [42394, 103511, 87692],
  [106124, 87689, 45852],
  [42394, 42505, 106124],
  [269032, 149921, 149897],
  [114992, 130170, 49496],
  [106124, 163963, 85904],
  [133205, 59203, 49377],
  [42394, 85810, 114992],
  [71981, 106124, 87689],
  [47809, 159130, 103024],
  [106124, 45852, 87689],
  [269032, 307378, 336138],
  [87691, 219114, 82570],
  [114968, 162001, 82573],
  [102943, 102046, 104447],
  [42394, 106124, 71981],
  [106124, 336138, 104366],
  [42394, 69204, 85810],
  [149942, 167766, 143233],
  [161437, 114981, 69204],
  [42394, 85810, 105988],
  [130167, 49460, 45782],
  [161437, 324218, 85904],
  [42394, 114992, 114982],
  [50059, 45802, 49377],
  [42394, 85810, 114992],
  [149897, 219112, 58772],
  [47809, 87691, 103024],
  [42394, 114982, 114968],
  [158181, 82567, 82914],
  [42394, 87692, 87691],
  [158181, 49378, 49480],
  [114992, 87691, 42394]
];

// --- EVENT LISTENERS ---
$(document).ready(function() {
  arrayPop(2); // 1 for "random" or 2 for static 10
  // var phptest = <?php echo "hello php world"; ?>;
  // var phptest = <?php echo json_encode($my_var); ?>;
  // alert(phptest);
  // alert(<?php echo "hello php world" ?>);
  // alert(<?php echo $_ENV["ARTMIND_DEV_PMA_TOKEN"]; ?>);
});

$("#artGet_previous").click(function() {
  stepThroughArtworks(objectIDs.length, objectIDs, 0);
});

$("#artGet_next").click(function() {
  stepThroughArtworks(1, objectIDs, 0);
});

// $("#artGet_previous_recommended").click(function() {
//   stepThroughArtworks(objectIDs_recommended.length, objectIDs_recommended, 1);
// });

$("#artGet_next_recommended").click(function() {
  stepThroughArtworks(1, objectIDs_recommended, 1);
});

function stepThroughArtworks(steps, array, recommended) {
  // Steps key:  1 == next, (arrayLength-1) == previous.
  console.log(steps);
  var strURI = getURI_getObjectInformation(steps, array);
  console.log(strURI);
  $("#artGet_form").attr("action", strURI);
  callPMA_getObjectInformation(strURI, recommended);
  if (recommended === 0) {
    voteDisplay(voteValue());
  }
  // alert(voteValue());
}

// $("body").on("mousemove mouseover mouseenter", "#downvote", function() {
//   $("#downvote").attr("src", "./images/Thumbs-Down-Picked-75px_chosen.png");
// });
//
// $("body").on("mouseup mouseleave dragstart", "#downvote", function() {
//   $("#downvote").attr("src", "./images/Thumbs-Down-Picked-75px.png");
// });
//
// $("body").on("mousemove mouseover mouseenter", "#0vote", function() {
//   $("#0vote").attr("src", "./images/0vote_chosen.png");
// });
//
// $("body").on("mouseup mouseleave dragstart", "#0vote", function() {
//   $("#0vote").attr("src", "./images/0vote.png");
// });
//
// $("body").on("mousemove mouseover mouseenter", "#upvote", function() {
//   $("#upvote").attr("src", "./images/Thumbs-Up-Picked-75px_chosen.png");
// });
//
// $("body").on("mouseup mouseleave dragstart", "#upvote", function() {
//   $("#upvote").attr("src", "./images/Thumbs-Up-Picked-75px.png");
// });

// Artmind Match
// $("#button_rec").click(function() {
//   getRecommendations()
// });

$("#button_previousPage").click(function() {
  $(".content").toggle();
  $(".results").toggle();
  ObjectID = tempObjectID;
  console.log("clicked.");
});

$("#downvote").click(function() {
  var startObjectID = ObjectID;
  var maxIndex = objectIDs.length - 1;
  // alert("downvote");
  voteValue(-1);
  $("#votes").text(votes);
  voteDisplay(-1);
  stepThroughArtworks(1, objectIDs, 0);
  if ( objectIDs[maxIndex] === startObjectID ) {
    getRecommendations()
  }
});

// $("#0vote").click(function() {
//   // alert("downvote");
//   voteValue(0);
//   $("#votes").text(votes);
//   voteDisplay(0);
// });

$("#upvote").click(function() {
  var startObjectID = ObjectID;
  var maxIndex = objectIDs.length - 1;
  // alert("upvote");
  voteValue(1);
  $("#votes").text(votes);
  voteDisplay(1);
  stepThroughArtworks(1, objectIDs, 0);
  if ( objectIDs[maxIndex] === startObjectID ) {
    getRecommendations()
  }
});

$("#loginButton").click(function() {
  window.open("sign_in.html", "_self");
  // Handler for .ready() called.
});

$("#logoutButton").click(function() {
  firebase
    .auth()
    .signOut()
    .then(function() {
      // Sign-out successful.
    })
    .catch(function(error) {
      // An error happened.
    });
  // alert("signout button clicked");
  // Handler for .ready() called.
});

// Set an authentication state observer and get user data
// https://firebase.google.com/docs/auth/web/start?authuser=0
firebase.auth().onAuthStateChanged(function(user) {
  if (user) {
    // User is signed in.
    // Boilerplate
    var displayName = user.displayName;
    var email = user.email;
    var emailVerified = user.emailVerified;
    var photoURL = user.photoURL;
    var isAnonymous = user.isAnonymous;
    var uid = user.uid;
    var providerData = user.providerData;
    // ...
    // Me trying stuff
    // $(".signedIn").toggle();
    // $(".signedOut").toggle();
    document.getElementById("loginButton").disabled = true;
    document.getElementById("logoutButton").disabled = false;
    document.getElementsByClassName("signedIn")[0].style.display = "visible";
    document.getElementsByClassName("signedIn")[1].style.display = "visible";
    document.getElementsByClassName("signedIn")[2].style.display = "none";
    document.getElementsByClassName("signedOut")[0].style.display = "none";
    document.getElementsByClassName("signedOut")[1].style.display = "none";
    signedInMessage(user.email);
  } else {
    // User is signed out.
    // ...
    // Me trying stuff
    // $(".signedIn").toggle();
    // $(".signedOut").toggle();
    document.getElementById("loginButton").disabled = false;
    document.getElementById("logoutButton").disabled = true;
    document.getElementsByClassName("signedIn")[0].style.display = "none";
    document.getElementsByClassName("signedIn")[1].style.display = "none";
    document.getElementsByClassName("signedIn")[2].style.display = "none";
    document.getElementsByClassName("signedOut")[0].style.display = "visible";
    document.getElementsByClassName("signedOut")[1].style.display = "visible";
    signedOutMessage();
  }
});

function signedInMessage(email) {
  $("#loginState").text("Welcome, " + email + "!");
  // if (user) {
  //   $("#loginState").append(user.displayName);
  // }
  // return null;
}

// --- FUNCTIONS ---
function voteDisplay(vote) {
  $(".voteButton").removeClass("voteButtonChosen");
  $("#downvote").attr("src", "./images/Thumbs-Down-Picked-75px.png");
  $("#0vote").attr("src", "./images/0vote.png");
  $("#upvote").attr("src", "./images/Thumbs-Up-Picked-75px.png");
  // alert($("#downvote").hasClass("voteButtonChosen"));
  switch (Number(vote)) {
    case -1:
      $("#downvote").addClass("voteButtonChosen");
      $("#downvote").attr("src", "./images/Thumbs-Down-Picked-75px_chosen.png");
      // alert("-1 chosen   " + $("#downvote").hasClass("voteButtonChosen"));
      break;
    case 0:
      $("#0vote").addClass("voteButtonChosen");
      $("#0vote").attr("src", "./images/0vote_chosen.png");
      break;
    case 1:
      $("#upvote").addClass("voteButtonChosen");
      $("#upvote").attr("src", "./images/Thumbs-Up-Picked-75px_chosen.png");
      break;
    default:
      $("#0vote").addClass("voteButtonChosen");
  }
}

function voteValue(newVote) {
  // returns voteValue for a given object ID. Also updates the vote value if included.
  // -1 = dislike, 0 = neutral, 1 = like
  // alert(objectIDs.indexOf(Number(ObjectID)));
  let indexVal = objectIDs.indexOf(Number(ObjectID));
  if (newVote == -1 || newVote == 0 || newVote == 1) {
    votes[indexVal] = newVote;
  }
  return votes[indexVal];
}

function arrayPop(method) {
  // For method #1
  let strURI;
  let galleriesN = galleries.lengh;
  // For method #2
  let artmind10 = [
    59198,
    102763,
    130164,
    308014,
    42394,
    84635,
    55399,
    102943,
    42253,
    46130
  ];

  if (method === 1) {
    // --- #1 "RANDOM" method. Picking 10 items at random from selected galleries. ---
    // get list of all objectIDs in all selected galleries
    galleries.forEach(function(currentValue, index) {
      // for all galleries
      console.log(index + " - " + currentValue);
      strURI = getURI_getObjectsForLocation(galleries[index]);
      console.log("strURI - " + strURI);
      // callPMA_getObjectsForLocation(getURI_getObjectsForLocation(currentValue)); // get objects in gallery
      // callback functions because of GetJSON API call is asynchronous
      callPMA_getObjectsForLocation(
        getURI_getObjectsForLocation(currentValue),
        function(arrayObjectsForLocation) {
          arrayObjectsForLocation.forEach(function(val) {
            objectsInGalleries.push(val);
          });
          console.log(index);
          if (index === 10) {
            // last time through, do my processing
            console.log(index + " - " + arrayObjectsForLocation);
            console.log(objectsInGalleries);
            console.log(objectsInGalleries.length);
            // choose 10 random index numbers in that whole list & push them to random10[]
            random10 = getRandomArray(10, 0, objectsInGalleries.length);
            console.log(random10);
            // push them to objectIDs
            random10.forEach(function(currentValue) {
              objectIDs.push(objectsInGalleries[currentValue]); // push object IDs to array objectIDs[]
              votes.push(999); // 999 means no value chosen; it is the default value
            });
            console.log(objectIDs);
            docReady();
          }
        }
      );
    });
  } else if (method === 2) {
    // --- #2 "CURATED" method. 10 pieces picked by hand. ---
    artmind10.forEach(function(currentValue) {
      objectIDs.push(currentValue);
      votes.push(999); // 999 means no value chosen
    });
    docReady();
  }
  return null;
  // alert(objectIDs);
}

function callPMA_getObjectsForLocation(strURI, callback) {
  // var strURI = "https://hackathon.philamuseum.org/api/v0/collection/object/location/?name=111&api_token=YOUR-TOKEN-HERE";
  $.getJSON(strURI, function(data) {
    var keys = []; // key name, e.g. "Artist"
    var values = []; // value associated with key, e.g. "Monet"
    let arrayObjectsForLocation = [];
    $.each(data, function(key, val) {
      keys.push(key);
      values.push(val);
    });
    values[keys.indexOf("ObjectIDs")].forEach(function(val) {
      arrayObjectsForLocation.push(val);
    });
    callback(arrayObjectsForLocation);
  });
}

function getURI_getObjectsForLocation(galleryID) {
  var strURI =
    baseURI_getObjectsForLocation + popCall_getObjectsForLocation(galleryID);
  return strURI;
}

function popCall_getObjectsForLocation(galleryID) {
  // returns output like "?name=GALLERY_ID&api_token=MY_TOKEN"
  var strText;
  strText = "?name=" + galleryID + "&api_token=" + token;
  return strText;
}

function getURI_getObjectInformation(indexChange, array) {
  console.log(indexChange + " - " + array);
  var strURI =
    baseURI_getObjectInformation +
    popCall_getObjectInformation(indexChange, array);
  return strURI;
  console.log(strURI);
}

function popCall_getObjectInformation(indexChange, array) {
  // returns output like "?query=OBJECT_ID&api_token=MY_TOKEN"
  console.log(indexChange + " - " + array);
  var index, strText;
  index = array.indexOf(Number(ObjectID));
  index += indexChange;
  index %= array.length;
  strText = "?query=" + array[index] + "&api_token=" + token;
  ObjectID = array[index];
  return strText;
}

function callPMA_getObjectInformation(strURI, recommended) {
  // "Returns collection information data for one specific object."
  // https://hackathon.philamuseum.org/documentation
  // Starter code from: https://api.jquery.com/jQuery.getJSON/
  // Copied/pasted on 4/27/18
  // console.log(strURI);
  // console.log(recommended);
  $.getJSON(strURI, function(data) {
    var items = []; // text list of key + item combinations returned, e.g. "Artist - Monet"
    var keys = []; // key name, e.g. "Artist"
    var values = []; // value associated with key, e.g. "Monet"
    var loc;
    $.each(data, function(key, val) {
      items.push("<li id='" + key + "'>" + key + " - " + val + "</li>");
      keys.push(key);
      if (key === "Thumbnail") {
        values.push(httpsIt(val));
      } else {
        values.push(val);
      }
      if (key === "Location") {
        loc = val;
      }
    });

    if (recommended === 0) {
      // var Thumbnail, Title, SocialTags, Classification,
      // var Style, Dated, Artist, Geography
      $("#artworkCaption").text(values[keys.indexOf("Title")]);
      $("#artworkCaption").append("<br>");
      $("#artworkCaption").append(values[keys.indexOf("Artist")]);
      $("#artworkCaption").append("<br>");
      $("#artworkCaption").append(values[keys.indexOf("Dated")]);
      $("#artworkCaption").append("<br>");
      $("#artworkCaption").append("@ ");
      $("#artworkCaption").append(loc.Gallery);
      // console.log(loc.Gallery);
      // console.log(values[keys.indexOf("Location")]);
      // console.log(items);
      // $("#artworkCaption").append("<br>");
      // $("#artworkCaption").append("<br>");
      // $("#artworkCaption").append(values[keys.indexOf("Classification")]);
      // $("#artworkCaption").append("<br>");
      // $("#artworkCaption").append(values[keys.indexOf("Style")]);
      // $("#artworkCaption").append("<br>");
      // $("#artworkCaption").append(values[keys.indexOf("Geography")]);
      // $("#artworkCaption").append("<br>");
      // $("#artworkCaption").append(values[keys.indexOf("SocialTags")]);
      $("#artwork").attr("src", values[keys.indexOf("Thumbnail")]);
      // https://api.jquery.com/load/
      $("#artwork").load(location.href + " #artwork", "");
    } else if (recommended === 1) {
      // // var Thumbnail, Title, SocialTags, Classification,
      // // var Style, Dated, Artist, Geography
      // $("#artworkCaption_recommended").text(values[keys.indexOf("Title")]);
      // $("#artworkCaption_recommended").append("<br>");
      // $("#artworkCaption_recommended").append(values[keys.indexOf("Artist")]);
      // $("#artworkCaption_recommended").append("<br>");
      // $("#artworkCaption_recommended").append(values[keys.indexOf("Dated")]);
      // $("#artworkCaption_recommended").append("<br>");
      // $("#artworkCaption_recommended").append("@ ");
      // $("#artworkCaption_recommended").append(loc.Gallery);
      // $("#artwork_recommended").attr("src", values[keys.indexOf("Thumbnail")]);
      // // https://api.jquery.com/load/
      // $("#artwork_recommended").load(location.href + " #artwork_recommended", "");

      // var Thumbnail, Title, SocialTags, Classification,
      // var Style, Dated, Artist, Geography
      $("#artworkCaption_recommended1_title").text(values[keys.indexOf("Title")]);
      // $("#artworkCaption_recommended1").append("<br>");
      $("#artworkCaption_recommended1").text(values[keys.indexOf("Artist")]);
      $("#artworkCaption_recommended1").append("<br>");
      $("#artworkCaption_recommended1").append(values[keys.indexOf("Dated")]);
      $("#artworkCaption_recommended1").append("<br>");
      $("#artworkCaption_recommended1").append(values[keys.indexOf("Medium")]);
      $("#artworkCaption_recommended1").append("<br>");
      $("#artworkCaption_recommended1").append("@ ");
      $("#artworkCaption_recommended1").append(loc.Gallery);
      $("#artworkCaption_recommended1").append("<br>");
      $("#artwork_recommended1").attr("src", values[keys.indexOf("Thumbnail")]);
      // https://api.jquery.com/load/
      $("#artwork_recommended1").load(location.href + " #artwork_recommended1", "");
    } else if (recommended === 2) {
      // var Thumbnail, Title, SocialTags, Classification,
      // var Style, Dated, Artist, Geography
      $("#artworkCaption_recommended2_title").text(values[keys.indexOf("Title")]);
      // $("#artworkCaption_recommended2").append("<br>");
      $("#artworkCaption_recommended2").text(values[keys.indexOf("Artist")]);
      $("#artworkCaption_recommended2").append("<br>");
      $("#artworkCaption_recommended2").append(values[keys.indexOf("Dated")]);
      $("#artworkCaption_recommended2").append("<br>");
      $("#artworkCaption_recommended2").append(values[keys.indexOf("Medium")]);
      $("#artworkCaption_recommended2").append("<br>");
      $("#artworkCaption_recommended2").append("@ ");
      $("#artworkCaption_recommended2").append(loc.Gallery);
      $("#artworkCaption_recommended2").append("<br>");
      $("#artwork_recommended2").attr("src", values[keys.indexOf("Thumbnail")]);
      // https://api.jquery.com/load/
      $("#artwork_recommended2").load(location.href + " #artwork_recommended2", "");
    } else if (recommended === 3) {
      // var Thumbnail, Title, SocialTags, Classification,
      // var Style, Dated, Artist, Geography
      $("#artworkCaption_recommended3_title").text(values[keys.indexOf("Title")]);
      // $("#artworkCaption_recommended3").append("<br>");
      $("#artworkCaption_recommended3").text(values[keys.indexOf("Artist")]);
      $("#artworkCaption_recommended3").append("<br>");
      $("#artworkCaption_recommended3").append(values[keys.indexOf("Dated")]);
      $("#artworkCaption_recommended3").append("<br>");
      $("#artworkCaption_recommended3").append(values[keys.indexOf("Medium")]);
      $("#artworkCaption_recommended3").append("<br>");
      $("#artworkCaption_recommended3").append("@ ");
      $("#artworkCaption_recommended3").append(loc.Gallery);
      $("#artworkCaption_recommended3").append("<br>");
      $("#artwork_recommended3").attr("src", values[keys.indexOf("Thumbnail")]);
      // https://api.jquery.com/load/
      $("#artwork_recommended3").load(location.href + " #artwork_recommended3", "");
    }
  });
}

function httpsIt(thisString) {
  //replace http:// with https:// if present
  // https://stackoverflow.com/questions/5491196/rewriting-http-url-to-https-using-regular-expression-and-javascript#5491311
  // April 29, 2018
  return thisString.replace(/^http:\/\//i, "https://");
}

function signedOutMessage() {
  $("#loginState").text("Thank you for visiting.");
  // if (user) {
  //   $("#loginState").append(user.displayName);
  // }
  // return null;
}

// https://firebase.google.com/docs/database/web/read-and-write?authuser=0
function writeUserData(userId, name) {
  // userId, name, email, imageUrl
  firebase
    .database()
    .ref("users/" + userId)
    .set({
      username: name
      // username: name,
      // email: email,
      // profile_picture : imageUrl
    });
}

function docReady() {
  var strURI;
  $("#votes").text(votes);
  ObjectID = objectIDs[0];
  strURI = getURI_getObjectInformation(0, objectIDs);
  $("#artGet_form").attr("action", strURI);
  callPMA_getObjectInformation(strURI, 0);
}

function getRandomInt(min, max) {
  // return 1 random integer between min and max
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive
}

// https://github.com/jcoffeepot/LottoSim
function getRandomArray(num_elements, min, max) {
  // return 1 array of n random integers between min and max
  var randArray = [];
  var temp, match;
  for (i = 0; i < num_elements; i++) {
    temp = getRandomInt(min, max); // generate new number
    match = 0;
    randArray.forEach(function(element, j) {
      if (temp == randArray[j]) {
        match += 1;
      }
    });
    if (match == 0) {
      // push if no match yet
      randArray.push(temp);
    } else {
      i--;
    }
  }
  randArray.sort((a, b) => a - b);
  return randArray;
}

function getRecommendations() {
  var strURI;
  // --- Write data to Firebase ---
  var database = firebase.database();
  firebase
    .database()
    .ref("users/" + firebase.auth().currentUser.uid)
    .set({
      username: firebase.auth().currentUser.displayName
      // username: name,
      // email: email,
      // profile_picture : imageUrl
    });
  objectIDs.forEach(function(currentValue, index) {
    if (currentValue !== 999) {
      firebase
      .database()
      .ref(
        "likes/" +
        firebase.auth().currentUser.uid +
        "_" +
        currentValue +
        "_" +
        Date.now()
      )
      .set({
        uid: firebase.auth().currentUser.uid,
        objectid: currentValue,
        rating: votes[index],
        time: Date.now()
      });
    }
  });

  // // --- Alert user that their preferences have been saved
  // alert(
  //   "Thank you! Your preferences have been saved to the database. Artmind's recommendations are not yet working - please check back later for an update."
  // );

  // --- Process results (recommendations)
  // choose objects
  // --- ADD THE PYTHON CODE HERE ---
  // objectIDs_recommended = [101687, 307378, 55686];
  objectIDs_recommended = returnRec(arrayToString(votes));
  tempObjectID = ObjectID;
  ObjectID = objectIDs_recommended[0];
  // processing...
  strURI = getURI_getObjectInformation(0, objectIDs_recommended);
  console.log(objectIDs_recommended);
  callPMA_getObjectInformation(strURI, 1);  // OK
  stepThroughArtworks(1, objectIDs_recommended, 2);
  stepThroughArtworks(1, objectIDs_recommended, 3);

  // --- Show results (recommendations)
  $(".content").toggle();
  $(".results").toggle();
}

// Returns array with 3 recommendations
function returnRec(strVotes) {
  var index = myVotes.indexOf(strVotes);
  return myRecs[index];
}

// Converts an array to string with no commas
function arrayToString(array) {
  var strTemp = array.toString();
  strTemp = strTemp.replace(/,/g, "");
  return strTemp;
}
